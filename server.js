const express = require("express");
const app = express();
const http = require("http").createServer(app);
const io = require("socket.io")(http);

const PORT = 8080;
app.use(express.static("public"));

let users = {};
let sockets = {};
let messageHistory = []; // üí¨ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

io.on("connection", (socket) => {
  let currentNick = null;

  // üß† –ü—Ä–∏ –∫–æ–Ω–Ω–µ–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —é–∑–µ—Ä–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—é
  socket.emit("user-list", Object.values(users));
  socket.emit("message-history", messageHistory); // ‚ö°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é

  socket.on("new-user", (nick) => {
    currentNick = nick;
    users[socket.id] = nick;
    sockets[nick] = socket;
    io.emit("user-list", Object.values(users));
  });

  socket.on("chat-message", (data) => {
    io.emit("chat-message", data);

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    messageHistory.push(data);
    if (messageHistory.length > 100) messageHistory.shift(); // –º–∞–∫—Å–∏–º—É–º 100 —Å–æ–æ–±—â–µ–Ω–∏–π
  });

  socket.on("change-nick", ({ oldNick, newNick }) => {
    if (users[socket.id] !== oldNick) return;

    users[socket.id] = newNick;
    delete sockets[oldNick];
    sockets[newNick] = socket;

    io.emit("system-message", `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${oldNick} –∏–∑–º–µ–Ω–∏–ª –Ω–∏–∫ –Ω–∞ ${newNick}, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!`);
    io.emit("user-list", Object.values(users));
  });

  socket.on("disconnect", () => {
    delete sockets[users[socket.id]];
    delete users[socket.id];
    io.emit("user-list", Object.values(users));
  });
});

http.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –¥–µ–ª–∞–µ—Ç –≥—Ä—è–∑—å –Ω–∞ http://localhost:${PORT}`);
});